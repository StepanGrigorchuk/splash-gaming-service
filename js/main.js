// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∞–π—Ç–∞
class SplashApp {
    constructor() {
        this.games = [
            {
                id: 'snake',
                title: '–ó–º–µ–π–∫–∞',
                description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ –∑–º–µ–π–∫–∞. –°–æ–±–∏—Ä–∞–π—Ç–µ –µ–¥—É –∏ —Ä–∞—Å—Ç–∏—Ç–µ!',
                icon: 'üêç',
                difficulty: '–õ–µ–≥–∫–æ',
                duration: '5-10 –º–∏–Ω',
                file: 'snake.html'
            },
            {
                id: 'tetris',
                title: '–¢–µ—Ç—Ä–∏—Å',
                description: '–°–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –±–ª–æ–∫–∏ –∏ –æ—á–∏—â–∞–π—Ç–µ –ª–∏–Ω–∏–∏.',
                icon: 'üß©',
                difficulty: '–°—Ä–µ–¥–Ω–µ',
                duration: '10-15 –º–∏–Ω',
                file: 'tetris.html'
            },
            {
                id: 'puzzle',
                title: '–ü—è—Ç–Ω–∞—à–∫–∏',
                description: '–†–∞—Å—Å—Ç–∞–≤—å—Ç–µ —á–∏—Å–ª–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.',
                icon: 'üî¢',
                difficulty: '–õ–µ–≥–∫–æ',
                duration: '5-10 –º–∏–Ω',
                file: 'puzzle.html'
            },
            {
                id: 'memory',
                title: '–ü–∞–º—è—Ç—å',
                description: '–ù–∞–π–¥–∏—Ç–µ –≤—Å–µ –ø–∞—Ä—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫.',
                icon: 'üß†',
                difficulty: '–°—Ä–µ–¥–Ω–µ',
                duration: '5-10 –º–∏–Ω',
                file: 'memory.html'
            },
            {
                id: 'planes',
                title: '–°–∞–º–æ–ª—ë—Ç—ã',
                description: '–õ–µ—Ç–∞–π—Ç–µ –Ω–∞ —Å–∞–º–æ–ª—ë—Ç–µ –∏ —É–Ω–∏—á—Ç–æ–∂–∞–π—Ç–µ –≤—Ä–∞–∂–µ—Å–∫–∏–µ —Ü–µ–ª–∏.',
                icon: '‚úàÔ∏è',
                difficulty: '–°—Ä–µ–¥–Ω–µ',
                duration: '10-15 –º–∏–Ω',
                file: 'planes.html'
            }
        ];
        
        this.init();
    }
    
    init() {
        this.loadTheme();
        this.bindEvents();
        this.renderGames();
        this.startAnimations();
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º—ã
    loadTheme() {
        const savedTheme = localStorage.getItem('splash-theme') || 'light';
        document.documentElement.setAttribute('data-theme', savedTheme);
        this.updateThemeIcon(savedTheme);
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
    toggleTheme() {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        
        document.documentElement.setAttribute('data-theme', newTheme);
        localStorage.setItem('splash-theme', newTheme);
        this.updateThemeIcon(newTheme);
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Ç–µ–º—ã
    updateThemeIcon(theme) {
        const icon = document.querySelector('#themeToggle i');
        if (icon) {
            icon.className = theme === 'dark' ? 'fas fa-moon' : 'fas fa-sun';
        }
    }
    
    // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
    bindEvents() {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
        const themeToggle = document.getElementById('themeToggle');
        if (themeToggle) {
            themeToggle.addEventListener('click', () => this.toggleTheme());
        }
        
        // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', (e) => {
                e.preventDefault();
                const target = document.querySelector(anchor.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });
        
        // –ê–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
        this.setupScrollAnimations();
    }
    
    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏–≥—Ä
    renderGames() {
        const gamesGrid = document.getElementById('gamesGrid');
        if (!gamesGrid) return;
        
        gamesGrid.innerHTML = this.games.map(game => `
            <div class="game-card fade-in" onclick="app.openGame('${game.id}')">
                <div class="game-image">
                    <span style="font-size: 4rem;">${game.icon}</span>
                </div>
                <div class="game-content">
                    <h3 class="game-title">${game.title}</h3>
                    <p class="game-description">${game.description}</p>
                    <div class="game-meta">
                        <span>–°–ª–æ–∂–Ω–æ—Å—Ç—å: ${game.difficulty}</span>
                        <span>${game.duration}</span>
                    </div>
                </div>
            </div>
        `).join('');
    }
    
    // –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–≥—Ä—ã
    openGame(gameId) {
        const game = this.games.find(g => g.id === gameId);
        if (game) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä–µ
            localStorage.setItem('splash-last-game', gameId);
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–≥—Ä—É
            window.location.href = `games/${game.file}`;
        }
    }
    
    // –ê–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
    setupScrollAnimations() {
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('fade-in');
                }
            });
        }, {
            threshold: 0.1
        });
        
        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        document.querySelectorAll('.game-card, .feature, .about-text').forEach(el => {
            observer.observe(el);
        });
    }
    
    // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–π
    startAnimations() {
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const elements = document.querySelectorAll('.hero-title, .hero-description, .cta-button');
        elements.forEach((el, index) => {
            setTimeout(() => {
                el.classList.add('fade-in');
            }, index * 200);
        });
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    saveGameStats(gameId, score, time) {
        const stats = JSON.parse(localStorage.getItem('splash-stats') || '{}');
        if (!stats[gameId]) {
            stats[gameId] = {
                plays: 0,
                bestScore: 0,
                totalTime: 0
            };
        }
        
        stats[gameId].plays++;
        stats[gameId].bestScore = Math.max(stats[gameId].bestScore, score);
        stats[gameId].totalTime += time;
        
        localStorage.setItem('splash-stats', JSON.stringify(stats));
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    getGameStats(gameId) {
        const stats = JSON.parse(localStorage.getItem('splash-stats') || '{}');
        return stats[gameId] || {
            plays: 0,
            bestScore: 0,
            totalTime: 0
        };
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
function scrollToGames() {
    const gamesSection = document.getElementById('games');
    if (gamesSection) {
        gamesSection.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
        });
    }
}

function showAllGames() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∏–≥—Ä—ã (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã)
    const gamesGrid = document.getElementById('gamesGrid');
    if (gamesGrid) {
        gamesGrid.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let app;
document.addEventListener('DOMContentLoaded', () => {
    app = new SplashApp();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = SplashApp;
}
